// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ems/v1/ems.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Event struct {
	Name             string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Organizers       []string `protobuf:"bytes,2,rep,name=organizers,proto3" json:"organizers,omitempty"`
	Description      string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Location         string   `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Date             string   `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
	Time             string   `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
	TicketPrice      string   `protobuf:"bytes,7,opt,name=ticket_price,json=ticketPrice,proto3" json:"ticket_price,omitempty"`
	NumTickets       uint64   `protobuf:"varint,8,opt,name=num_tickets,json=numTickets,proto3" json:"num_tickets,omitempty"`
	TicketCategories []string `protobuf:"bytes,9,rep,name=ticket_categories,json=ticketCategories,proto3" json:"ticket_categories,omitempty"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab04e176814db968, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Event) GetOrganizers() []string {
	if m != nil {
		return m.Organizers
	}
	return nil
}

func (m *Event) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Event) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Event) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *Event) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *Event) GetTicketPrice() string {
	if m != nil {
		return m.TicketPrice
	}
	return ""
}

func (m *Event) GetNumTickets() uint64 {
	if m != nil {
		return m.NumTickets
	}
	return 0
}

func (m *Event) GetTicketCategories() []string {
	if m != nil {
		return m.TicketCategories
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "ems.v1.Event")
}

func init() { proto.RegisterFile("ems/v1/ems.proto", fileDescriptor_ab04e176814db968) }

var fileDescriptor_ab04e176814db968 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xbf, 0x4a, 0x43, 0x31,
	0x14, 0xc6, 0x9b, 0xfe, 0xb3, 0x4d, 0x1d, 0x6a, 0x70, 0x08, 0x1d, 0xe2, 0xd5, 0xa9, 0x20, 0x34,
	0x14, 0xdf, 0x40, 0x11, 0x1c, 0xa5, 0x38, 0xb9, 0x94, 0x34, 0x3d, 0xdc, 0x86, 0x36, 0xc9, 0x25,
	0x49, 0x8b, 0xfa, 0x14, 0xe2, 0x53, 0x39, 0x76, 0x74, 0x94, 0xde, 0x17, 0x91, 0x24, 0x52, 0xba,
	0xfd, 0xce, 0xef, 0x23, 0xf9, 0x38, 0x07, 0x0f, 0x41, 0x7b, 0xbe, 0x9b, 0x72, 0xd0, 0x7e, 0x52,
	0x39, 0x1b, 0x2c, 0xe9, 0x46, 0xdc, 0x4d, 0x47, 0x97, 0xa5, 0x2d, 0x6d, 0x52, 0x3c, 0x52, 0x4e,
	0x6f, 0xbe, 0x9a, 0xb8, 0xf3, 0xb8, 0x03, 0x13, 0x08, 0xc1, 0x6d, 0x23, 0x34, 0x50, 0x54, 0xa0,
	0x71, 0x7f, 0x96, 0x98, 0x30, 0x8c, 0xad, 0x2b, 0x85, 0x51, 0x1f, 0xe0, 0x3c, 0x6d, 0x16, 0xad,
	0x71, 0x7f, 0x76, 0x62, 0x48, 0x81, 0x07, 0x4b, 0xf0, 0xd2, 0xa9, 0x2a, 0x28, 0x6b, 0x68, 0x2b,
	0x3d, 0x3d, 0x55, 0x64, 0x84, 0x7b, 0x1b, 0x2b, 0x45, 0x8a, 0xdb, 0x29, 0x3e, 0xce, 0xb1, 0x71,
	0x29, 0x02, 0xd0, 0x4e, 0x6e, 0x8c, 0x1c, 0x5d, 0x50, 0x1a, 0x68, 0x37, 0xbb, 0xc8, 0xe4, 0x1a,
	0x9f, 0x07, 0x25, 0xd7, 0x10, 0xe6, 0x95, 0x53, 0x12, 0xe8, 0x59, 0xae, 0xc9, 0xee, 0x39, 0x2a,
	0x72, 0x85, 0x07, 0x66, 0xab, 0xe7, 0x59, 0x79, 0xda, 0x2b, 0xd0, 0xb8, 0x3d, 0xc3, 0x66, 0xab,
	0x5f, 0xb2, 0x21, 0xb7, 0xf8, 0xe2, 0xff, 0x0f, 0x29, 0x02, 0x94, 0xd6, 0x29, 0xf0, 0xb4, 0x9f,
	0x16, 0x1a, 0xe6, 0xe0, 0xe1, 0xe8, 0xef, 0x9f, 0xbe, 0x0f, 0x0c, 0xed, 0x0f, 0x0c, 0xfd, 0x1e,
	0x18, 0xfa, 0xac, 0x59, 0x63, 0x5f, 0xb3, 0xc6, 0x4f, 0xcd, 0x1a, 0xaf, 0x93, 0x52, 0x85, 0xd5,
	0x76, 0x31, 0x91, 0x56, 0x73, 0x67, 0x37, 0x1b, 0xb9, 0x12, 0xca, 0x78, 0xbe, 0x12, 0x72, 0xad,
	0xad, 0x4f, 0x13, 0x7f, 0x8b, 0xc7, 0xe7, 0xe1, 0xbd, 0x02, 0xbf, 0xe8, 0xa6, 0x2b, 0xdf, 0xfd,
	0x05, 0x00, 0x00, 0xff, 0xff, 0x93, 0x3e, 0xb7, 0x81, 0x97, 0x01, 0x00, 0x00,
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TicketCategories) > 0 {
		for iNdEx := len(m.TicketCategories) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TicketCategories[iNdEx])
			copy(dAtA[i:], m.TicketCategories[iNdEx])
			i = encodeVarintEms(dAtA, i, uint64(len(m.TicketCategories[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.NumTickets != 0 {
		i = encodeVarintEms(dAtA, i, uint64(m.NumTickets))
		i--
		dAtA[i] = 0x40
	}
	if len(m.TicketPrice) > 0 {
		i -= len(m.TicketPrice)
		copy(dAtA[i:], m.TicketPrice)
		i = encodeVarintEms(dAtA, i, uint64(len(m.TicketPrice)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Time) > 0 {
		i -= len(m.Time)
		copy(dAtA[i:], m.Time)
		i = encodeVarintEms(dAtA, i, uint64(len(m.Time)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Date) > 0 {
		i -= len(m.Date)
		copy(dAtA[i:], m.Date)
		i = encodeVarintEms(dAtA, i, uint64(len(m.Date)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintEms(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEms(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Organizers) > 0 {
		for iNdEx := len(m.Organizers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Organizers[iNdEx])
			copy(dAtA[i:], m.Organizers[iNdEx])
			i = encodeVarintEms(dAtA, i, uint64(len(m.Organizers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEms(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEms(dAtA []byte, offset int, v uint64) int {
	offset -= sovEms(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEms(uint64(l))
	}
	if len(m.Organizers) > 0 {
		for _, s := range m.Organizers {
			l = len(s)
			n += 1 + l + sovEms(uint64(l))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEms(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovEms(uint64(l))
	}
	l = len(m.Date)
	if l > 0 {
		n += 1 + l + sovEms(uint64(l))
	}
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovEms(uint64(l))
	}
	l = len(m.TicketPrice)
	if l > 0 {
		n += 1 + l + sovEms(uint64(l))
	}
	if m.NumTickets != 0 {
		n += 1 + sovEms(uint64(m.NumTickets))
	}
	if len(m.TicketCategories) > 0 {
		for _, s := range m.TicketCategories {
			l = len(s)
			n += 1 + l + sovEms(uint64(l))
		}
	}
	return n
}

func sovEms(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEms(x uint64) (n int) {
	return sovEms(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEms
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEms
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEms
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEms
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organizers = append(m.Organizers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEms
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEms
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEms
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEms
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEms
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEms
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Date = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEms
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEms
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEms
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEms
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TicketPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTickets", wireType)
			}
			m.NumTickets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumTickets |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketCategories", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEms
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEms
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TicketCategories = append(m.TicketCategories, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEms(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEms
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEms
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEms
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEms
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEms
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEms
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEms        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEms          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEms = fmt.Errorf("proto: unexpected end of group")
)
