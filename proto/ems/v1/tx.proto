// syntax = "proto3";
// package ems.v1;

// import "cosmos/msg/v1/msg.proto";
// import "ems/v1/genesis.proto";
// import "gogoproto/gogo.proto";
// import "cosmos_proto/cosmos.proto";

// option go_package = "github.com/rollchains/hackmoschain/x/ems/types";

// // Msg defines the Msg service.
// service Msg {
//   option (cosmos.msg.v1.service) = true;

//   // UpdateParams defines a governance operation for updating the parameters.
//   //
//   // Since: cosmos-sdk 0.47
//   rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

//   rpc CreateEvent(MsgCreateEvent) returns (MsgCreateEventResponse);
// }

// // MsgUpdateParams is the Msg/UpdateParams request type.
// //
// // Since: cosmos-sdk 0.47
// message MsgUpdateParams {
//   option (cosmos.msg.v1.signer) = "authority";

//   // authority is the address of the governance account.
//   string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

//   // params defines the parameters to update.
//   //
//   // NOTE: All parameters must be supplied.
//   Params params = 2 [(gogoproto.nullable) = false];
// }

// // MsgUpdateParamsResponse defines the response structure for executing a
// // MsgUpdateParams message.
// //
// // Since: cosmos-sdk 0.47
// message MsgUpdateParamsResponse {}

// // MsgSetServiceName defines the structure for setting a name.
// // message MsgCreateEvent {
// //     option (cosmos.msg.v1.signer) = "organizer";
  
// //     string organizer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
// //     string name = 2;
// //   }

// message MsgCreateEvent {
//   option (cosmos.msg.v1.signer) = "organizer";

//   string organizer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
//   string name = 2;
//   string description = 3; 
//   string location = 4; 
//   string date = 5; 
//   string time = 6;
//   string ticket_price = 7; 
//   uint64 num_tickets = 8; 
//   repeated string ticket_categories = 9; 
// }

//   // MsgSetServiceNameResponse is an empty reply.
//   message MsgCreateEventResponse {}

// proto/ems/v1/tx.proto
syntax = "proto3";
package ems.v1;

import "cosmos/msg/v1/msg.proto";
import "ems/v1/genesis.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/rollchains/hackmoschain/x/ems/types";

service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  rpc CreateEvent(MsgCreateEvent) returns (MsgCreateEventResponse);

  rpc IssueEventNFT(MsgIssueEventNFT) returns (MsgIssueEventNFTResponse);
}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  Params params = 2 [(gogoproto.nullable) = false];
}

message MsgUpdateParamsResponse {}

message MsgCreateEvent {
  option (cosmos.msg.v1.signer) = "organizer";
  string organizer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string name = 2;
  string id = 3;
  string description = 4;
  string location = 5;
  string date = 6;
  string time = 7;
  string ticket_price = 8;
  uint64 num_tickets = 9;
  repeated string ticket_categories = 10;
}

message MsgCreateEventResponse {}

message MsgIssueEventNFT {
  option (cosmos.msg.v1.signer) = "organizer";
  string organizer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string receiver = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string id = 3;
}

message MsgIssueEventNFTResponse {}