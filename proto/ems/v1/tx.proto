// proto/ems/v1/tx.proto
syntax = "proto3";
package ems.v1;

import "cosmos/msg/v1/msg.proto";
import "ems/v1/genesis.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/rollchains/hackmoschain/x/ems/types";

service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  rpc CreateEvent(MsgCreateEvent) returns (MsgCreateEventResponse);

  rpc IssueEventNFT(MsgIssueEventNFT) returns (MsgIssueEventNFTResponse);
}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  Params params = 2 [(gogoproto.nullable) = false];
}

message MsgUpdateParamsResponse {}

message MsgCreateEvent {
  option (cosmos.msg.v1.signer) = "organizer";
  string organizer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string name = 2;
  string id = 3;
  string description = 4;
  string location = 5;
  string date = 6;
  string time = 7;
  string ticket_price = 8;
  uint64 num_tickets = 9;
  repeated string ticket_categories = 10;
}

message MsgCreateEventResponse {}

message MsgIssueEventNFT {
  option (cosmos.msg.v1.signer) = "organizer";
  string organizer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string receiver = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string id = 3;
}

message MsgIssueEventNFTResponse {}