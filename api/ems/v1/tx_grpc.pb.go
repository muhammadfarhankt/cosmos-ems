// syntax = "proto3";
// package ems.v1;

// import "cosmos/msg/v1/msg.proto";
// import "ems/v1/genesis.proto";
// import "gogoproto/gogo.proto";
// import "cosmos_proto/cosmos.proto";

// option go_package = "github.com/rollchains/hackmoschain/x/ems/types";

// // Msg defines the Msg service.
// service Msg {
//   option (cosmos.msg.v1.service) = true;

//   // UpdateParams defines a governance operation for updating the parameters.
//   //
//   // Since: cosmos-sdk 0.47
//   rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

//   rpc CreateEvent(MsgCreateEvent) returns (MsgCreateEventResponse);
// }

// // MsgUpdateParams is the Msg/UpdateParams request type.
// //
// // Since: cosmos-sdk 0.47
// message MsgUpdateParams {
//   option (cosmos.msg.v1.signer) = "authority";

//   // authority is the address of the governance account.
//   string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

//   // params defines the parameters to update.
//   //
//   // NOTE: All parameters must be supplied.
//   Params params = 2 [(gogoproto.nullable) = false];
// }

// // MsgUpdateParamsResponse defines the response structure for executing a
// // MsgUpdateParams message.
// //
// // Since: cosmos-sdk 0.47
// message MsgUpdateParamsResponse {}

// // MsgSetServiceName defines the structure for setting a name.
// // message MsgCreateEvent {
// //     option (cosmos.msg.v1.signer) = "organizer";

// //     string organizer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

// //     string name = 2;
// //   }

// message MsgCreateEvent {
//   option (cosmos.msg.v1.signer) = "organizer";

//   string organizer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
//   string name = 2;
//   string description = 3;
//   string location = 4;
//   string date = 5;
//   string time = 6;
//   string ticket_price = 7;
//   uint64 num_tickets = 8;
//   repeated string ticket_categories = 9;
// }

//   // MsgSetServiceNameResponse is an empty reply.
//   message MsgCreateEventResponse {}

// proto/ems/v1/tx.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ems/v1/tx.proto

package emsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName  = "/ems.v1.Msg/UpdateParams"
	Msg_CreateEvent_FullMethodName   = "/ems.v1.Msg/CreateEvent"
	Msg_IssueEventNFT_FullMethodName = "/ems.v1.Msg/IssueEventNFT"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateEvent(ctx context.Context, in *MsgCreateEvent, opts ...grpc.CallOption) (*MsgCreateEventResponse, error)
	IssueEventNFT(ctx context.Context, in *MsgIssueEventNFT, opts ...grpc.CallOption) (*MsgIssueEventNFTResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateEvent(ctx context.Context, in *MsgCreateEvent, opts ...grpc.CallOption) (*MsgCreateEventResponse, error) {
	out := new(MsgCreateEventResponse)
	err := c.cc.Invoke(ctx, Msg_CreateEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) IssueEventNFT(ctx context.Context, in *MsgIssueEventNFT, opts ...grpc.CallOption) (*MsgIssueEventNFTResponse, error) {
	out := new(MsgIssueEventNFTResponse)
	err := c.cc.Invoke(ctx, Msg_IssueEventNFT_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateEvent(context.Context, *MsgCreateEvent) (*MsgCreateEventResponse, error)
	IssueEventNFT(context.Context, *MsgIssueEventNFT) (*MsgIssueEventNFTResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateEvent(context.Context, *MsgCreateEvent) (*MsgCreateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedMsgServer) IssueEventNFT(context.Context, *MsgIssueEventNFT) (*MsgIssueEventNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueEventNFT not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateEvent(ctx, req.(*MsgCreateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_IssueEventNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIssueEventNFT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IssueEventNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_IssueEventNFT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IssueEventNFT(ctx, req.(*MsgIssueEventNFT))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ems.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _Msg_CreateEvent_Handler,
		},
		{
			MethodName: "IssueEventNFT",
			Handler:    _Msg_IssueEventNFT_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ems/v1/tx.proto",
}
